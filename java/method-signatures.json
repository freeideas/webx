{
 "Hello": [
  "public Hello();",
  "public static void main(java.lang.String[]);"
 ],
 "appz.findui.UiObjDectector": [
  "public appz.findui.UiObjDectector();",
  "public static void main(java.lang.String[]);",
  "public static java.lang.String getAnnotationColor(java.io.File);",
  "public static java.util.List<appz.findui.UiObjDectector$UiObject> detectUiObjects(java.io.File);",
  "public static appz.findui.UiObjDectector$BoundingBox estimateOrRefineBoundingBox(java.io.File, appz.findui.UiObjDectector$UiObject, appz.findui.UiObjDectector$BoundingBox, java.lang.String);",
  "public static void detectAndPrintUiObjects(java.io.File);",
  "public static java.io.File createMaskedImage(java.io.File, appz.findui.UiObjDectector$BoundingBox, java.lang.String, int, int);",
  "public static java.io.File createFinalVisualization(java.io.File, java.util.List<appz.findui.UiObjDectector$BoundingBox>, java.lang.String);"
 ],
 "appz.webx.DefaultSecurityGuard": [
  "public appz.webx.DefaultSecurityGuard();",
  "public static boolean basic_TEST_();",
  "public static void main(java.lang.String[]);"
 ],
 "appz.webx.Main": [
  "public appz.webx.Main();",
  "public static void main(java.lang.String[]);"
 ],
 "appz.webx.TestEmail": [
  "public appz.webx.TestEmail();",
  "public static void main(java.lang.String[]);"
 ],
 "appz.webx.WebXSimpleTest": [
  "public appz.webx.WebXSimpleTest();",
  "public static void main(java.lang.String[]);"
 ],
 "buildtools.Build": [
  "public buildtools.Build();",
  "public static void main(java.lang.String[]);",
  "public static void compile();",
  "public static java.io.File buildJar();",
  "public static java.io.File buildExe(java.io.File);"
 ],
 "buildtools.DownloadJars": [
  "public buildtools.DownloadJars();",
  "public static void main(java.lang.String[]);"
 ],
 "buildtools.HelloRoot": [
  "public buildtools.HelloRoot();",
  "public static void main(java.lang.String[]);"
 ],
 "buildtools.MethodSignatureExtractor": [
  "public buildtools.MethodSignatureExtractor();",
  "public static void main(java.lang.String[]);"
 ],
 "buildtools.TestAllClasses": [
  "public buildtools.TestAllClasses();",
  "public static void main(java.lang.String[]);"
 ],
 "http.AuthToken": [
  "public http.AuthToken(java.lang.String, long, java.lang.String);",
  "public java.lang.String toJson();",
  "public static http.AuthToken fromJson(java.lang.CharSequence);",
  "public static http.AuthToken find(java.lang.CharSequence);",
  "public static http.AuthToken newAuthToken(java.lang.String);",
  "public boolean invalidate();",
  "public boolean invalidateAll();",
  "public boolean isValid();",
  "public static void main(java.lang.String[]);",
  "public java.lang.CharSequence toJson();"
 ],
 "http.FileExtensionHandler": [
  "public http.FileExtensionHandler();",
  "public http.FileExtensionHandler addExtensionHandler(java.lang.String, http.HttpHandler);",
  "public http.FileExtensionHandler setDefaultHandler(http.HttpHandler);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void main(java.lang.String[]);"
 ],
 "http.FileResponse": [
  "public http.FileResponse(java.io.File);",
  "public jLib.Result<java.lang.Long, java.lang.Exception> write(java.io.OutputStream);"
 ],
 "http.HttpErrorHandler": [
  "public http.HttpErrorHandler(int, java.lang.String);",
  "public http.HttpResponse handle(http.HttpRequest);"
 ],
 "http.HttpErrorResponse": [
  "public http.HttpErrorResponse(int, java.lang.String);"
 ],
 "http.HttpFileHandler": [
  "public http.HttpFileHandler(java.lang.String, java.io.File);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public http.HttpResponse serveDirListing(java.io.File);"
 ],
 "http.HttpHandler": [
  "public abstract http.HttpResponse handle(http.HttpRequest);"
 ],
 "http.HttpHeaderBlock": [
  "public http.HttpHeaderBlock(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);",
  "public http.HttpHeaderBlock(int, java.lang.String, java.util.Map<java.lang.String, java.lang.String>);",
  "public http.HttpHeaderBlock(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>);",
  "public static http.HttpHeaderBlock redirect(java.lang.String);",
  "public http.HttpHeaderBlock withAddHeader(java.lang.String, java.lang.String);",
  "public static jLib.Result<http.HttpHeaderBlock, java.lang.Exception> readFrom(java.io.InputStream);",
  "public static jLib.Result<http.HttpHeaderBlock, java.lang.Exception> parseFrom(java.lang.String);",
  "public java.lang.String getHeaderValue(java.lang.String);",
  "public java.util.Map<java.lang.String, java.lang.String> cookieMap();",
  "public java.util.Map<java.lang.String, java.lang.String> queryMap();",
  "public java.lang.String getUri();",
  "public java.lang.String getContentType();",
  "public java.lang.Long getContentLength();",
  "public java.lang.String getMethod();",
  "public jLib.Result<java.lang.Long, java.lang.Exception> write(java.io.OutputStream);",
  "public java.lang.String toString();",
  "public java.lang.String getRequestPath();",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpJsonHandler": [
  "public http.HttpJsonHandler(java.util.Map<java.lang.Object, java.lang.Object>);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void mergeMap(java.util.Map<java.lang.Object, java.lang.Object>, java.util.Map<java.lang.Object, java.lang.Object>);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpJssHandler": [
  "public http.HttpJssHandler(java.lang.String, java.io.File);",
  "public http.HttpJssHandler(java.lang.String, java.io.File, java.util.Map<java.lang.Object, java.lang.Object>);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpLoginHandler": [
  "public http.HttpLoginHandler();",
  "public java.lang.String getEmailAddress(http.HttpRequest);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpMessage": [
  "public http.HttpMessage(http.HttpHeaderBlock, byte[]);",
  "public static java.util.Map<java.lang.String, java.lang.Object> parseUrlEncoded(java.lang.String);",
  "public static jLib.Result<http.HttpMessage, java.lang.Exception> readHttpMessage(http.HttpHeaderBlock, java.io.InputStream);",
  "public static jLib.Result<http.HttpMessage, java.lang.Exception> readHttpMessage(java.io.InputStream);",
  "public jLib.Result<java.lang.Long, java.lang.Exception> write(java.io.OutputStream);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpProxyHandler": [
  "public http.HttpProxyHandler();",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpReplacingProxyHandler": [
  "public http.HttpReplacingProxyHandler();",
  "public http.HttpReplacingProxyHandler(jLib.Jsonable);",
  "public http.HttpReplacingProxyHandler(java.io.File);",
  "public http.HttpReplacingProxyHandler(java.util.Map<java.lang.String, java.lang.Object>);",
  "public http.HttpResponse handle(http.HttpRequest);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpRequest": [
  "public http.HttpRequest(http.HttpHeaderBlock, byte[]);",
  "public static http.HttpRequest newHttpRequest(http.HttpMessage);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpResponse": [
  "public http.HttpResponse(http.HttpHeaderBlock, byte[]);",
  "public static http.HttpResponse newHttpResponse(http.HttpMessage);",
  "public static http.HttpResponse redirect(java.lang.String);",
  "public static void main(java.lang.String[]);"
 ],
 "http.HttpServer": [
  "public http.HttpServer(int);",
  "public http.HttpServer(int, boolean);",
  "public void setShutdownCode(java.lang.String);",
  "public boolean isShutdown();",
  "public void start();",
  "public static java.lang.String shutdownTimestamp();",
  "public static boolean basic_TEST_();",
  "public static boolean shutdownTimestamp_TEST_();",
  "public static boolean shutdownTimestamp_method_TEST_();",
  "public static boolean shouldShutDown_TEST_();",
  "public static boolean requestLogging_TEST_();",
  "public static void main(java.lang.String[]);"
 ],
 "http.SecurityGuard": [
  "public http.SecurityGuard();",
  "public boolean test(http.HttpRequest);",
  "public static boolean basic_TEST_();",
  "public static void main(java.lang.String[]);",
  "public boolean test(java.lang.Object);"
 ],
 "jLib.BlockingByteBuffer": [
  "public jLib.BlockingByteBuffer(int);",
  "public jLib.BlockingByteBuffer();",
  "public void setMaxBufSize(int);",
  "public int getMaxBufSize();",
  "public void reset();",
  "public java.io.OutputStream getOutputStream();",
  "public java.io.InputStream getInputStream();",
  "public boolean isClosed();",
  "public boolean isClosing();",
  "public void waitUntilClosed();",
  "public boolean isFull();",
  "public boolean isEmpty();",
  "public int size();",
  "public void close();",
  "public void write(byte[], int, int);",
  "public int read(byte[], int, int);",
  "public java.lang.String toString();",
  "public static boolean _TEST_();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.CachedLLmLib": [
  "public jLib.CachedLLmLib();",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCall(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.util.List<java.lang.String>);"
 ],
 "jLib.ChildThread": [
  "public jLib.ChildThread();",
  "public jLib.ChildThread(java.lang.Runnable);",
  "public void start();",
  "public java.lang.Thread getParent();",
  "public void close();",
  "public java.lang.String toString();",
  "public int hashCode();",
  "public boolean equals(java.lang.Object);"
 ],
 "jLib.CircularByteBuffer": [
  "public jLib.CircularByteBuffer();",
  "public jLib.CircularByteBuffer(int);",
  "public byte[] getBytes();",
  "public jLib.CircularByteBuffer clone();",
  "public jLib.CircularByteBuffer identicalClone();",
  "public int size();",
  "public boolean isEmpty();",
  "public int capacity();",
  "public int spareCapacity();",
  "public byte get(int);",
  "public int get(int, byte[], int, int);",
  "public boolean regionEquals(int, byte[]);",
  "public boolean regionEquals(int, byte[], int, int);",
  "public boolean startsWith(byte[]);",
  "public boolean startsWith(byte[], int, int);",
  "public boolean endsWith(byte[]);",
  "public boolean endsWith(byte[], int, int);",
  "public int indexOf(byte[]);",
  "public int indexOf(byte[], int, int);",
  "public byte set(int, byte);",
  "public int set(int, byte[], int, int);",
  "public int removeFirst(byte[], int, int);",
  "public int removeFirst(byte[]);",
  "public byte removeFirst();",
  "public void addLast(byte[], int, int);",
  "public void addLast(byte[]);",
  "public void addLast(byte);",
  "public void addFirst(byte[], int, int);",
  "public void addFirst(byte[]);",
  "public void addFirst(byte);",
  "public int removeLast(byte[], int, int);",
  "public int removeLast(byte[]);",
  "public byte removeLast();",
  "public int ensureCapacity(int);",
  "public int setCapacity(int);",
  "public jLib.CircularByteBuffer clear();",
  "public int skipFirst(int);",
  "public int skipLast(int);",
  "public int readFrom(java.io.InputStream, int);",
  "public void writeTo(java.io.OutputStream, int);",
  "public java.io.OutputStream getOutputStream();",
  "public java.io.InputStream getInputStream();",
  "public java.lang.CharSequence asCharSequence();",
  "public java.lang.CharSequence asCharSequence(int, int);",
  "public java.lang.String toString(java.nio.charset.Charset);",
  "public java.lang.String toString();",
  "public int hashCode();",
  "public boolean equals(java.lang.Object);",
  "public static void main(java.lang.String[]);",
  "public java.lang.Object clone();"
 ],
 "jLib.Email": [
  "public jLib.Email(java.lang.String, int, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);",
  "public jLib.Email();",
  "public jLib.Result<java.lang.Boolean, java.lang.Exception> sendEmail(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);",
  "public jLib.Result<java.util.List<jLib.Email$EmailMessage>, java.lang.Exception> readEmails(int);",
  "public jLib.Result<java.util.List<jLib.Email$EmailMessage>, java.lang.Exception> readEmails(java.lang.String, int, boolean);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.FileLib": [
  "public jLib.FileLib();",
  "public static java.lang.String file2string(java.io.File);",
  "public static java.lang.String file2string(java.io.File, java.nio.charset.Charset);",
  "public static boolean string2file(java.lang.Object, java.io.File, boolean);",
  "public static boolean string2file(java.lang.Object, java.io.File, boolean, java.nio.charset.Charset);",
  "public static boolean fileCopy(java.lang.Object, java.lang.Object);",
  "public static boolean fileCopy(java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object);",
  "public static boolean cp(java.io.File, java.io.File);",
  "public static boolean mv(java.io.File, java.io.File);",
  "public static boolean rm(java.io.File);",
  "public static boolean rm(java.nio.file.Path);",
  "public static boolean rm(java.lang.String);",
  "public static char[] readFully(java.io.Reader);",
  "public static byte[] readFully(java.io.InputStream);",
  "public static java.lang.Throwable append2file(java.io.File, java.lang.Object);",
  "public static java.lang.String getFileExtension(java.lang.String);",
  "public static java.lang.String getMimeType(java.io.File);",
  "public static java.lang.String getMimeType(java.lang.String);",
  "public static java.lang.String safeForFilename(java.lang.String);",
  "public static java.lang.String backupFilespec(java.lang.String);",
  "public static java.lang.String backupFilespec(java.lang.String, boolean, boolean, boolean, java.lang.Long, java.lang.String);",
  "public static java.io.File unzip(java.io.File, java.io.File, java.lang.String, java.lang.Object);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.JsonDecoder": [
  "public static java.lang.Object decode(java.lang.Object);",
  "public static <K, V> java.util.Map<K, V> decodeMap(java.lang.Object);",
  "public static <T> java.util.List<T> decodeList(java.lang.Object);",
  "public static java.lang.String decodeString(java.lang.Object);",
  "public static java.lang.Number decodeNumber(java.lang.Object);",
  "public static java.lang.Long decodeLong(java.lang.Object);",
  "public static java.lang.Integer decodeInteger(java.lang.Object);",
  "public static java.lang.Double decodeDouble(java.lang.Object);",
  "public static java.lang.Boolean decodeBoolean(java.lang.Object);",
  "public static java.io.Reader toReader(java.lang.Object, java.lang.String);",
  "public jLib.JsonDecoder(java.io.Reader);",
  "public java.lang.Object decode();",
  "public <K, V> java.util.Map<K, V> decodeMap();",
  "public <T> java.util.List<T> decodeList();",
  "public java.lang.String decodeString();",
  "public java.lang.Long decodeLong();",
  "public java.lang.Double decodeDouble();",
  "public java.lang.Number decodeNumber();",
  "public java.lang.Boolean decodeBoolean();",
  "public java.lang.Object decodeNull();",
  "public int decodeUnicodeChar();",
  "public java.lang.String decodeWhitespace();",
  "public java.lang.String decodeComment();",
  "public java.lang.String decodeIdentifier();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.JsonEncoder": [
  "public static java.lang.String encode(java.lang.Object);",
  "public static java.lang.String encode(java.lang.Object, java.lang.String);",
  "public static java.lang.String encodeMap(java.util.Map<?, ?>);",
  "public static java.lang.String encodeMap(java.util.Map<?, ?>, java.lang.String);",
  "public static java.lang.String encodeList(java.util.Collection<?>);",
  "public static java.lang.String encodeList(java.util.Collection<?>, java.lang.String);",
  "public static java.lang.String encodeString(java.lang.String);",
  "public static java.lang.String encodeNumber(java.lang.Number);",
  "public static java.lang.String encodeBoolean(java.lang.Boolean);",
  "public jLib.JsonEncoder(java.io.Writer, java.lang.String);",
  "public jLib.JsonEncoder write(java.lang.Object);",
  "public jLib.JsonEncoder writeMap(java.util.Map<?, ?>);",
  "public jLib.JsonEncoder writeList(java.util.Collection<?>);",
  "public jLib.JsonEncoder writeList(java.util.Iterator<?>);",
  "public jLib.JsonEncoder writeBoolean(java.lang.Boolean);",
  "public jLib.JsonEncoder writeNumber(java.lang.Number);",
  "public jLib.JsonEncoder writeString(java.lang.String);",
  "public static java.util.Map<java.lang.String, java.lang.Object> toMap(java.lang.Object);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.JsonSchema": [
  "public jLib.JsonSchema();",
  "public static java.util.List<java.lang.String> validateJson(java.lang.String, java.lang.String);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.JsonSerializable": [
  "public default java.lang.CharSequence toJson();",
  "public static java.lang.Object fromJson(java.lang.CharSequence);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Jsonable": [
  "public jLib.Jsonable(java.lang.Object);",
  "public java.lang.Object get();",
  "public java.lang.Object get(java.lang.Object);",
  "public java.lang.Object get(java.lang.Object...);",
  "public java.lang.Object put(java.lang.Object, java.lang.Object);",
  "public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();",
  "public int size();",
  "public boolean containsKey(java.lang.Object);",
  "public java.lang.Object remove(java.lang.Object);",
  "public void clear();",
  "public java.util.Set<java.lang.Object> keySet();",
  "public java.util.Collection<java.lang.Object> values();",
  "public boolean equals(java.lang.Object);",
  "public int hashCode();",
  "public java.lang.String toString();",
  "public static java.lang.Object get(java.lang.Object, java.lang.Object);",
  "public static java.lang.Object merge(java.lang.Object, java.lang.Object, java.lang.Boolean);",
  "public static boolean test_TEST_();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LLmLib": [
  "public jLib.LLmLib();",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCallAnthropic(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Integer, java.io.File);",
  "public jLib.Result<java.util.List<java.lang.String>, java.lang.Exception> listAntropicModels();",
  "public static jLib.LLmLib newInstance();",
  "public java.util.List<java.lang.Object> mergeTemplates(java.util.List<java.lang.Object>);",
  "public jLib.Result<java.util.List<java.lang.String>, java.lang.Exception> listGoogleModels();",
  "public jLib.Result<java.util.List<java.lang.String>, java.lang.Exception> listOpenAiModels();",
  "public static java.lang.String findCodeInResponse(java.lang.String);",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCallGoogle(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Integer, java.io.File);",
  "public static java.util.List<java.lang.String> validateJson(java.lang.String, java.lang.String);",
  "public jLib.Result<jLib.Pair<java.lang.Boolean, java.lang.String>, java.lang.Exception> llmYesOrNo(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>);",
  "public jLib.Result<jLib.Pair<java.lang.Boolean, java.lang.String>, java.lang.Exception> llmYesOrNo(java.util.List<java.lang.Object>);",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCall(java.util.List<java.lang.Object>);",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCall(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.util.List<java.lang.String>);",
  "public jLib.Result<java.lang.String, java.lang.Exception> enforceSchema(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.Integer);",
  "public static jLib.Result<java.util.List<java.util.Map<java.lang.String, java.lang.Object>>, java.lang.Exception> ocr(java.io.File);",
  "public jLib.Result<java.lang.String, java.lang.Exception> llmCallOpenAiCompat(java.util.List<java.lang.Object>, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Integer, java.io.File);",
  "public static java.io.File logLLmCall(java.io.File, java.lang.String, java.lang.Object, java.lang.String);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Lib": [
  "public jLib.Lib();",
  "public static java.lang.String normalizePath(java.lang.String);",
  "public static java.net.ServerSocket createServerSocket(int, boolean, java.io.File, java.lang.String, java.lang.String);",
  "public static java.lang.Object merge(java.lang.Object, java.lang.Object, java.lang.Boolean);",
  "public static java.lang.String randToken();",
  "public static java.lang.String randToken(java.lang.String, int, boolean);",
  "public static java.lang.String toISO8601(java.lang.String);",
  "public static long microsSinceEpoch(java.lang.String);",
  "public static long toMicrosSinceEpoch(java.time.Instant);",
  "public static java.lang.String getRemoteAddr(java.net.Socket);",
  "public static boolean isParentChildPath(java.lang.String, java.lang.String);",
  "public static byte[] toBytes(java.io.InputStream, boolean);",
  "public static long copy(java.io.Reader, java.io.Writer...);",
  "public static long copy(java.io.InputStream, java.io.OutputStream...);",
  "public static java.io.InputStream toInputStream(java.lang.Object);",
  "public static java.lang.Throwable append2file(java.io.File, java.lang.Object);",
  "public static boolean isText(byte[]);",
  "public static boolean isBinary(byte[]);",
  "public static <T> java.lang.Iterable<T> asIterable(java.util.Iterator<T>);",
  "public static java.lang.String thisMethodName();",
  "public static java.lang.String thisClassName();",
  "public static java.util.List<java.lang.String> getStackTrace();",
  "public static java.util.List<java.lang.String> getStackTrace(boolean);",
  "public static java.util.List<java.lang.String> getStackTrace(java.lang.Throwable, boolean);",
  "public static java.util.List<java.lang.String> getStackTrace(java.lang.Throwable, boolean, int);",
  "public static boolean isPortListening(int);",
  "public static boolean isPortListening(java.lang.String);",
  "public static boolean isPortListening(java.lang.String, int);",
  "public static java.lang.String formatException(java.lang.String);",
  "public static java.lang.String formatException(java.lang.Throwable);",
  "public static java.lang.Throwable getRootCause(java.lang.Throwable);",
  "public static java.lang.Object put(java.lang.Object, java.util.Collection, java.lang.Object);",
  "public static java.lang.Long toLong(java.lang.Object);",
  "public static java.lang.Float toFloat(java.lang.Object);",
  "public static java.lang.Double toDouble(java.lang.Object);",
  "public static java.lang.Integer toInteger(java.lang.Object);",
  "public static java.lang.String hashPassword(java.lang.String, int);",
  "public static java.lang.String hashPassword(java.lang.String);",
  "public static boolean verifyPassword(java.lang.String, java.lang.String);",
  "public static java.lang.String uniqID();",
  "public static java.lang.String uniqID(int);",
  "public static java.lang.String uniqID(java.lang.String);",
  "public static java.lang.String uniqID(java.lang.String, int);",
  "public static java.lang.String toBase62(long);",
  "public static <K, V> java.util.Map<K, V> mapOf(java.lang.Object...);",
  "public static <T> java.util.List<T> listOf(T...);",
  "public static java.lang.String timeStamp(java.lang.Long, java.lang.Boolean, java.lang.String);",
  "public static java.lang.String timeStamp();",
  "public static java.lang.String timeStamp(java.lang.String);",
  "public static java.lang.String timeStamp(java.lang.Long);",
  "public static long currentTimeMicros();",
  "public static boolean isEmpty(java.lang.Object);",
  "public static boolean notEmpty(java.lang.Object);",
  "public static java.lang.String nvl(java.lang.Object, java.lang.String);",
  "public static <T> T nvl(T, T);",
  "public static boolean isTrue(java.lang.Object);",
  "public static <T> java.lang.Iterable<T> iterable(java.util.Iterator<T>);",
  "public static java.util.List asList(java.lang.Object);",
  "public static <T> T findFirst(java.util.Collection<T>, T...);",
  "public static <T> T findValue(T, java.util.Collection<T>);",
  "public static <K> K findKey(java.util.Map<K, ?>, K...);",
  "public static <K> K findKey(K, java.util.Map<K, ?>);",
  "public static boolean isEqual(java.lang.Object, java.lang.Object);",
  "public static java.lang.String getClassName(int);",
  "public static java.lang.Class thisClass();",
  "public static java.lang.Class<?> getCallingClass();",
  "public static java.lang.String getCallingClassName();",
  "public static void dialog(java.lang.String, boolean, int);",
  "public static java.lang.Object dialog(java.lang.String, java.lang.String, java.lang.Object[], int, boolean, boolean, boolean, boolean, javax.swing.JFrame, int);",
  "public static java.lang.String dialog(java.lang.String, java.lang.String, java.lang.String, javax.swing.JFrame, int);",
  "public static java.lang.Process osCmd(java.util.List<java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, java.io.File);",
  "public static int OSProcIO(java.lang.Process, java.io.InputStream, java.io.OutputStream, java.io.OutputStream);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LibApp": [
  "public jLib.LibApp();",
  "public static jLib.Jsonable loadCreds();",
  "public static java.lang.String getAppName();",
  "public static java.io.File getAppDir();",
  "public static java.io.File getAppDir(java.lang.String);",
  "public static java.lang.String findAppClassName();",
  "public static boolean alreadyRunning(java.io.File);",
  "public static void archiveLogFiles();",
  "public static java.lang.Class<?> findExecutingMainClass();",
  "public static java.io.File getMainExeFile();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LibFile": [
  "public jLib.LibFile();",
  "public static java.lang.String file2string(java.io.File);",
  "public static java.lang.String file2string(java.io.File, java.nio.charset.Charset);",
  "public static boolean string2file(java.lang.Object, java.io.File, boolean);",
  "public static boolean string2file(java.lang.Object, java.io.File, boolean, java.nio.charset.Charset);",
  "public static boolean fileCopy(java.lang.Object, java.lang.Object);",
  "public static boolean fileCopy(java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object);",
  "public static boolean cp(java.io.File, java.io.File);",
  "public static boolean mv(java.io.File, java.io.File);",
  "public static boolean rm(java.io.File);",
  "public static boolean rm(java.nio.file.Path);",
  "public static boolean rm(java.lang.String);",
  "public static char[] readFully(java.io.Reader);",
  "public static byte[] readFully(java.io.InputStream);",
  "public static java.lang.Throwable append2file(java.io.File, java.lang.Object);",
  "public static java.lang.String getFileExtension(java.lang.String);",
  "public static java.lang.String getMimeType(java.io.File);",
  "public static java.lang.String getMimeType(java.lang.String);",
  "public static java.lang.String safeForFilename(java.lang.String);",
  "public static java.lang.String backupFilespec(java.lang.String);",
  "public static java.lang.String backupFilespec(java.lang.String, boolean, boolean, boolean, java.lang.Long, java.lang.String);",
  "public static java.io.File unzip(java.io.File, java.io.File, java.lang.String, java.lang.Object);",
  "public static java.lang.String getCanonicalPath(java.io.File);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LibIO": [
  "public jLib.LibIO();",
  "public static char[] readFully(java.io.Reader);",
  "public static byte[] readFully(java.io.InputStream);",
  "public static long copy(java.io.Reader, java.io.Writer...);",
  "public static long copy(java.io.InputStream, java.io.OutputStream...);",
  "public static java.io.InputStream toInputStream(java.lang.Object);",
  "public static byte[] toBytes(java.io.InputStream, boolean);",
  "public static boolean isText(byte[]);",
  "public static boolean isBinary(byte[]);",
  "public static java.lang.Throwable append2file(java.io.File, java.lang.Object);",
  "public static java.io.InputStream multicast(java.io.InputStream, java.io.OutputStream...);",
  "public static java.io.OutputStream multicast(java.io.OutputStream...);",
  "public static java.io.InputStream readerInputStream(java.io.Reader);",
  "public static java.io.Writer writerOutputStream(java.io.OutputStream);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LibString": [
  "public jLib.LibString();",
  "public static java.lang.String xmlSafeText(java.lang.Object);",
  "public static java.lang.String xmlSafeText(java.lang.Object, java.lang.Boolean);",
  "public static java.lang.String unescapeXML(java.lang.String);",
  "public static java.lang.String urlEncode(java.util.Map<java.lang.String, java.lang.Object>);",
  "public static java.lang.String urlEncode(java.lang.Object);",
  "public static java.lang.String urlEncode(java.lang.Object, java.lang.Boolean);",
  "public static java.lang.String urlDecode(java.lang.String);",
  "public static java.lang.String toString(byte[], int, int);",
  "public static java.lang.String toString(java.lang.Object);",
  "public static java.lang.String nw(java.lang.CharSequence);",
  "public static java.lang.String normalSpace(java.lang.CharSequence);",
  "public static java.lang.String onlyAlphaNum(java.lang.Object);",
  "public static boolean isEmail(java.lang.String);",
  "public static java.lang.String unindent(java.lang.String);",
  "public static java.lang.String dblQuot(java.lang.Object);",
  "public static java.lang.String quot(java.lang.Object, java.lang.String, java.lang.String);",
  "public static java.lang.String quot(java.lang.Object, java.lang.String);",
  "public static java.lang.String quot(java.lang.Object, char);",
  "public static java.lang.String[] wrapText(java.lang.String, int);",
  "public static java.lang.String[] wrapText(java.lang.String, int, boolean);",
  "public static java.lang.String rpad(java.lang.String, int, java.lang.String);",
  "public static java.lang.String centerPad(java.lang.String, int);",
  "public static java.lang.String evalUrlTemplate(java.lang.String, java.util.Map<?, ?>);",
  "public static java.lang.String evalTemplate(java.io.File, java.util.Map<?, ?>);",
  "public static java.lang.String evalTemplate(java.lang.String, java.util.Map<?, ?>);",
  "public static java.lang.String evalTemplate(java.lang.String, java.lang.String, java.lang.String, java.util.Map<?, ?>);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LibTest": [
  "public jLib.LibTest();",
  "public static java.lang.Object asrt(java.lang.Object, java.lang.Object...);",
  "public static boolean asrtEQ(java.lang.Object, java.lang.Object, java.lang.Object...);",
  "public static boolean testClass();",
  "public static boolean testClass(java.lang.Class<?>);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Log": [
  "public jLib.Log();",
  "public static java.lang.Object log(java.lang.Object);",
  "public static boolean logOnce(java.lang.Object);",
  "public static boolean logOnce(java.lang.Object, long);",
  "public static boolean logOnce(java.lang.String, java.lang.Object, long);",
  "public static java.lang.Object logException(java.lang.Object);",
  "public static java.io.File getLogFile();",
  "public static void setLogFile(java.io.File);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.LruCache": [
  "public jLib.LruCache(int, long, boolean);",
  "protected V construct(K);",
  "protected boolean evictOne();",
  "protected void autoClose(V);",
  "public K getOldestKey();",
  "public K getNewestKey();",
  "public K findKeyGE(K);",
  "public K findKeyLE(K);",
  "public V put(K, V);",
  "public V put(K, V, long);",
  "public V get(java.lang.Object);",
  "public int size();",
  "public boolean isEmpty();",
  "public boolean containsKey(java.lang.Object);",
  "public boolean containsValue(java.lang.Object);",
  "public V remove(java.lang.Object);",
  "public void putAll(java.util.Map<? extends K, ? extends V>);",
  "public void clear();",
  "public java.util.Set<K> keySet();",
  "public java.util.Collection<V> values();",
  "public java.util.Set<java.util.Map$Entry<K, V>> entrySet();",
  "public boolean equals(java.lang.Object);",
  "public int hashCode();",
  "public java.lang.String toString();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Pair": [
  "public jLib.Pair(A, B);",
  "public int hashCode();",
  "public boolean equals(java.lang.Object);",
  "public java.lang.String toString();",
  "public A getKey();",
  "public B getValue();",
  "public B setValue(B);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.ParseArgs": [
  "public jLib.ParseArgs(java.lang.String[]);",
  "public jLib.ParseArgs setAppName(java.lang.String);",
  "public jLib.ParseArgs setDescr(java.lang.String);",
  "public jLib.ParseArgs setHelpFooter(java.lang.String);",
  "public java.lang.String getString(java.lang.String, java.lang.String, java.lang.String);",
  "public java.lang.Integer getInteger(java.lang.String, java.lang.Integer, java.lang.String);",
  "public java.lang.Float getFloat(java.lang.String, java.lang.Float, java.lang.String);",
  "public java.lang.Boolean getBoolean(java.lang.String, java.lang.Boolean, java.lang.String);",
  "public java.util.List<java.lang.String> getMulti(java.lang.String, java.util.List<java.lang.String>, java.lang.String);",
  "public java.lang.String getHelp();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Result": [
  "public jLib.Result(boolean, S, E);",
  "public static <S, E> jLib.Result<S, E> ok(S);",
  "public static <S, E> jLib.Result<S, E> err(E);",
  "public boolean isOk();",
  "public S ok();",
  "public E err();",
  "public jLib.Result<S, E> setLogFile(java.io.File);",
  "public java.lang.Object toJsonable();",
  "public static <S, E> jLib.Result<S, E> fromJsonable(java.lang.Object);",
  "public java.lang.String toString();",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.SshClient": [
  "public jLib.SshClient(java.lang.String, java.lang.String, java.lang.String);",
  "public jLib.SshClient(java.lang.String, java.lang.String, java.io.File);",
  "public void close();",
  "public long upload(java.io.InputStream, java.lang.String, boolean);",
  "public java.io.InputStream download(java.lang.String, long);",
  "public java.io.InputStream download(java.lang.String);",
  "public boolean rm(java.lang.String);",
  "public boolean rename(java.lang.String, java.lang.String);",
  "public long fileLength(java.lang.String);",
  "public int osCmd(java.lang.String);",
  "public int osCmd(java.lang.String, java.lang.String, java.lang.StringBuffer, java.lang.StringBuffer);",
  "public int osCmd(java.lang.String, java.io.InputStream, java.io.OutputStream, java.io.OutputStream);",
  "public jLib.Pair<java.io.InputStream, java.io.InputStream> osCmd(java.lang.String, java.io.InputStream);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.TestClass": [
  "public jLib.TestClass();",
  "public jLib.TestClass(java.lang.String, int);"
 ],
 "jLib.TmpDir": [
  "public jLib.TmpDir();",
  "public void close();",
  "public java.io.File getDir();",
  "public java.io.File newFile(java.lang.String);",
  "public java.io.File newDir(java.lang.String);",
  "public static void main(java.lang.String[]);"
 ],
 "jLib.Trio": [
  "public jLib.Trio(A, B, C);",
  "public int hashCode();",
  "public boolean equals(java.lang.Object);",
  "public java.lang.String toString();",
  "public static void main(java.lang.String[]);"
 ],
 "persist.PersistentData": [
  "public persist.PersistentData();",
  "public persist.PersistentData(java.lang.String, java.lang.String);",
  "public persist.PersistentData construct(java.lang.String, java.lang.String);",
  "public static persist.PersistentData construct(java.io.File, java.lang.String);",
  "public static persist.PersistentData temp(java.lang.String);",
  "public static persist.PersistentData temp();",
  "public persist.PersistentData$Row row(long);",
  "public persist.PersistentData$Row row(long, long);",
  "public persist.PersistentData$Row row(long, java.lang.String);",
  "public persist.PersistentData$Row row(java.lang.Long, java.lang.Long, java.lang.Long, java.lang.String, java.lang.String, java.lang.Long);",
  "public persist.PersistentMap getRootMap();",
  "public persist.PersistentList getRootList();",
  "public persist.PersistentMap getMap(long);",
  "public persist.PersistentList getList(long);",
  "public long size(long);",
  "public java.lang.Object get(long);",
  "public java.lang.Object get(long, long);",
  "public java.lang.Object get(long, java.lang.String);",
  "public java.lang.Object put(long, java.lang.Object);",
  "public java.lang.Object put(long, java.lang.String, java.lang.Object);",
  "public java.lang.Object put(long, long, java.lang.Object);",
  "public java.lang.String remove(long);",
  "public java.lang.String remove(long, long);",
  "public java.lang.String remove(long, java.lang.String);",
  "public java.lang.Object insert(long, long, java.lang.Object);",
  "public long[] getMinMaxEntryOrder(long);",
  "public java.util.Iterator<persist.PersistentData$Row> rowIterator(long);",
  "public java.lang.Iterable<persist.PersistentData$Row> rowIterable(long);",
  "public long clearChildValues(long);",
  "public long deleteOrphans(int);",
  "public void close();",
  "public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> debugDump();",
  "public boolean entryOrderCheck(long, boolean);",
  "public static void main(java.lang.String[]);"
 ],
 "persist.PersistentList": [
  "public persist.PersistentList(persist.PersistentData, long);",
  "public java.lang.Object get(int);",
  "public int size();",
  "public java.lang.Object set(int, java.lang.Object);",
  "public void add(int, java.lang.Object);",
  "public java.lang.Object remove(int);",
  "public void clear();",
  "public void push(java.lang.Object);",
  "public java.lang.Object pop();",
  "public void unshift(java.lang.Object);",
  "public java.lang.Object shift();",
  "public static void main(java.lang.String[]);"
 ],
 "persist.PersistentMap": [
  "public persist.PersistentMap(persist.PersistentData, long);",
  "public int size();",
  "public java.lang.Object get(java.lang.Object);",
  "public java.lang.Object put(java.lang.Object, java.lang.Object);",
  "public java.lang.Object remove(java.lang.Object);",
  "public void clear();",
  "public boolean containsKey(java.lang.Object);",
  "public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();",
  "public static void main(java.lang.String[]);"
 ],
 "tmp.TestProxyConfig": [
  "public tmp.TestProxyConfig();",
  "public static void main(java.lang.String[]);"
 ]
}